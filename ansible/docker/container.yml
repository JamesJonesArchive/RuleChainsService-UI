version: "2"
settings:

  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    base: centos:7
    # roles_path:   # Specify a local path containing Ansible roles
    # volumes:      # Provide a list of volumes to mount
    # environment:  # List or mapping of environment variables

  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: rulechainsui

  # The deployment_output_path is mounted to the Conductor container, and the 
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  # deployment_output_path: ./ansible-deployment

  # When using the k8s or openshift engines, use the following to authorize with the API.
  # Values set here will be passed to the Ansible modules. Any file paths will be mounted
  # to the conductor container, allowing the `run` command to access the API.
  #k8s_auth:
    # path to a K8s config file
    #config_file:
    # name of a context found within the config file
    #context:
    # URL for accessing the K8s API
    #host:
    # An API authentication token
    #api_key:
    # Path to a ca cert file
    #ssl_ca_cert:
    # Path to a cert file
    #cert_file:
    # Path to a key file
    #key_file:
    # boolean, indicating if SSL certs should be validated
    #verify_ssl:

  # When using the k8s or openshift engines, use the following to set the namespace.
  # If not set, the project name will be used. For openshift, the namespace maps to a project,
  # and description and display_name are supported.
  #k8s_namespace:
  #  name:
  #  description:
  #  display_name:

services:
  # Add your containers here, specifying the base image you want to build from.
  # To use this example, uncomment it and delete the curly braces after services key.
  # You may need to run `docker pull ubuntu:trusty` for this to work.

  rulechains-ui:
    from: "centos:7"
    ports:
      - "8091:443"
    command: ['/usr/bin/dumb-init', 'nginx', '-c', '/etc/nginx/nginx.conf']
    dev_overrides:
      environment:
        - "DEBUG=1"
    roles:
      - role: sslcerts
        ssl_certs_generate_dh_param: true
        ssl_certs_path_owner: "root"
        ssl_certs_path_group: "root"
        # ssl_certs_common_name: {{ansible_fqdn}}
      - role: nginx
        nginx_configs:
          ssl:
            - ssl_certificate_key {{ssl_certs_privkey_path}}
            - ssl_certificate     {{ssl_certs_cert_path}}
            - ssl_dhparam         {{ssl_certs_dhparam_path}}
        nginx_sites:
          default:
            - listen 443 ssl
            - server_name _
            - root "/usr/share/nginx/html"
            - index index.html
        nginx_http_params:
          - sendfile "on"
          - tcp_nopush "on"
          - tcp_nodelay "on"
          - keepalive_timeout "65"
          - access_log "/var/log/nginx/access.log"
          - error_log "/var/log/nginx/error.log"
          - server_tokens off
          - types_hash_max_size 2048
          - client_max_body_size "3M"
        nginx_daemon_mode: "off"
registries: {}
  # Add optional registries used for deployment. For example:
  #  google:
  #    url: https://gcr.io
  #    namespace: my-cool-project-xxxxxx   
